// Copyright (c) 2009, Whispersoft s.r.l.
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
// * Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
// * Redistributions in binary form must reproduce the above
// copyright notice, this list of conditions and the following disclaimer
// in the documentation and/or other materials provided with the
// distribution.
// * Neither the name of Whispersoft s.r.l. nor the names of its
// contributors may be used to endorse or promote products derived from
// this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//

#ifndef __WHISPERLIB_BASE_CALLBACK_CALLBACK1_H__
#define __WHISPERLIB_BASE_CALLBACK_CALLBACK1_H__

#include <whisperlib/base/callback/callback.h>

template<typename X0>
class Callback1 : public Callback {
public:
  Callback1(bool is_permanent)
    : Callback(),
      is_permanent_(is_permanent) {
  }
  virtual ~Callback1() {
  }
  void Run(X0 x0) {
    const bool permanent = is_permanent();
    RunInternal(x0);
    if ( !permanent ) {
      delete this;
    }
  }
  bool is_permanent() const { return is_permanent_; }
protected:
  virtual void RunInternal(X0 x0) = 0;
private:
  const bool is_permanent_;
};

//////////////////////////////////////////////////////////////////////

template<typename X0>
class Callback1_0 : public Callback1<X0> {
public:
  typedef void (*Fun)(X0);
  Callback1_0(bool is_permanent, Fun fun)
    : Callback1<X0>(is_permanent),
      fun_(fun) {
  }
protected:
  virtual void RunInternal(X0 x0) {
    (*fun_)(x0);
  }
private:
  Fun fun_;
};
template<typename X0>
Callback1_0<X0>* NewCallback(void (*fun)(X0)) {
  return new Callback1_0<X0>(false, fun);
}
template<typename X0>
Callback1_0<X0>* NewPermanentCallback(void (*fun)(X0)) {
  return new Callback1_0<X0>(true, fun);
}


template<typename C, typename X0>
class MemberCallback1_0 : public Callback1<X0> {
public:
  typedef void (C::*Fun)(X0);
  MemberCallback1_0 (bool is_permanent, C* c, Fun fun)
    : Callback1<X0>(is_permanent),
      c_(c),
      fun_(fun) {
  }
protected:
  virtual void RunInternal(X0 x0) {
    (c_->*fun_)(x0);
  }
private:
  C* c_;
  Fun fun_;
};

template<typename C, typename X0>
MemberCallback1_0<C, X0>* NewCallback(C* c, void (C::*fun)(X0)) {
  return new MemberCallback1_0<C, X0>(false, c, fun);
}
template<typename C, typename X0>
MemberCallback1_0<C, X0>* NewPermanentCallback(C* c, void (C::*fun)(X0)) {
  return new MemberCallback1_0<C, X0>(true, c, fun);
}

template<typename C, typename X0>
class ConstMemberCallback1_0 : public Callback1<X0> {
public:
  typedef void (C::*Fun)(X0) const;
  ConstMemberCallback1_0 (bool is_permanent, const C* c, Fun fun)
    : Callback1<X0>(is_permanent),
      c_(c),
      fun_(fun) {
  }
protected:
  virtual void RunInternal(X0 x0) {
    (c_->*fun_)(x0);
  }
private:
  const C* c_;
  Fun fun_;
};

template<typename C, typename X0>
ConstMemberCallback1_0<C, X0>* NewCallback(const C* c, void (C::*fun)(X0) const) {
  return new ConstMemberCallback1_0<C, X0>(false, c, fun);
}
template<typename C, typename X0>
ConstMemberCallback1_0<C, X0>* NewPermanentCallback(const C* c, void (C::*fun)(X0) const) {
  return new ConstMemberCallback1_0<C, X0>(true, c, fun);
}

//////////////////////////////////////////////////////////////////////
//
// Autogenerated callback classes (w/ print_callback.py)
//

template<typename T0, typename X0>
class Callback1_1 : public Callback1<X0> {
public:
  typedef void (*Fun)(T0, X0);
  Callback1_1(bool is_permanent, Fun fun, T0 p0)
    : Callback1<X0>(is_permanent),
      p0_(p0),
      fun_(fun) {
  }
protected:
  virtual void RunInternal(X0 x0) {
    (*fun_)(p0_, x0);
  }
private:
  T0 p0_;
  Fun fun_;
};
template<typename T0, typename X0>
Callback1_1<T0, X0>* NewCallback(void (*fun)(T0, X0), T0 p0) {
  return new Callback1_1<T0, X0>(false, fun, p0);
}
template<typename T0, typename X0>
Callback1_1<T0, X0>* NewPermanentCallback(void (*fun)(T0, X0), T0 p0) {
  return new Callback1_1<T0, X0>(true, fun, p0);
}

template<typename C, typename T0, typename X0>
class ConstMemberCallback1_1 : public Callback1<X0> {
public:
  typedef void (C::*Fun)(T0, X0) const;
  ConstMemberCallback1_1 (bool is_permanent, const C* c, Fun fun, T0 p0)
    : Callback1<X0>(is_permanent),
      c_(c),
      p0_(p0),
      fun_(fun) {
  }
protected:
  virtual void RunInternal(X0 x0) {
    (c_->*fun_)(p0_, x0);
  }
private:
  const C* c_;
  T0 p0_;
  Fun fun_;
};

template<typename C, typename T0, typename X0>
ConstMemberCallback1_1<C, T0, X0>* NewCallback(const C* c, void (C::*fun)(T0, X0) const, T0 p0) {
  return new ConstMemberCallback1_1<C, T0, X0>(false, c, fun, p0);
}
template<typename C, typename T0, typename X0>
ConstMemberCallback1_1<C, T0, X0>* NewPermanentCallback(const C* c, void (C::*fun)(T0, X0) const, T0 p0) {
  return new ConstMemberCallback1_1<C, T0, X0>(true, c, fun, p0);
}

template<typename C, typename T0, typename X0>
class MemberCallback1_1 : public Callback1<X0> {
public:
  typedef void (C::*Fun)(T0, X0);
  MemberCallback1_1 (bool is_permanent, C* c, Fun fun, T0 p0)
    : Callback1<X0>(is_permanent),
      c_(c),
      p0_(p0),
      fun_(fun) {
  }
protected:
  virtual void RunInternal(X0 x0) {
    (c_->*fun_)(p0_, x0);
  }
private:
  C* c_;
  T0 p0_;
  Fun fun_;
};

template<typename C, typename T0, typename X0>
MemberCallback1_1<C, T0, X0>* NewCallback(C* c, void (C::*fun)(T0, X0), T0 p0) {
  return new MemberCallback1_1<C, T0, X0>(false, c, fun, p0);
}
template<typename C, typename T0, typename X0>
MemberCallback1_1<C, T0, X0>* NewPermanentCallback(C* c, void (C::*fun)(T0, X0), T0 p0) {
  return new MemberCallback1_1<C, T0, X0>(true, c, fun, p0);
}

template<typename T0, typename T1, typename X0>
class Callback1_2 : public Callback1<X0> {
public:
  typedef void (*Fun)(T0, T1, X0);
  Callback1_2(bool is_permanent, Fun fun, T0 p0, T1 p1)
    : Callback1<X0>(is_permanent),
      p0_(p0),
      p1_(p1),
      fun_(fun) {
  }
protected:
  virtual void RunInternal(X0 x0) {
    (*fun_)(p0_, p1_, x0);
  }
private:
  T0 p0_;
  T1 p1_;
  Fun fun_;
};
template<typename T0, typename T1, typename X0>
Callback1_2<T0, T1, X0>* NewCallback(void (*fun)(T0, T1, X0), T0 p0, T1 p1) {
  return new Callback1_2<T0, T1, X0>(false, fun, p0, p1);
}
template<typename T0, typename T1, typename X0>
Callback1_2<T0, T1, X0>* NewPermanentCallback(void (*fun)(T0, T1, X0), T0 p0, T1 p1) {
  return new Callback1_2<T0, T1, X0>(true, fun, p0, p1);
}

template<typename C, typename T0, typename T1, typename X0>
class ConstMemberCallback1_2 : public Callback1<X0> {
public:
  typedef void (C::*Fun)(T0, T1, X0) const;
  ConstMemberCallback1_2 (bool is_permanent, const C* c, Fun fun, T0 p0, T1 p1)
    : Callback1<X0>(is_permanent),
      c_(c),
      p0_(p0),
      p1_(p1),
      fun_(fun) {
  }
protected:
  virtual void RunInternal(X0 x0) {
    (c_->*fun_)(p0_, p1_, x0);
  }
private:
  const C* c_;
  T0 p0_;
  T1 p1_;
  Fun fun_;
};

template<typename C, typename T0, typename T1, typename X0>
ConstMemberCallback1_2<C, T0, T1, X0>* NewCallback(const C* c, void (C::*fun)(T0, T1, X0) const, T0 p0, T1 p1) {
  return new ConstMemberCallback1_2<C, T0, T1, X0>(false, c, fun, p0, p1);
}
template<typename C, typename T0, typename T1, typename X0>
ConstMemberCallback1_2<C, T0, T1, X0>* NewPermanentCallback(const C* c, void (C::*fun)(T0, T1, X0) const, T0 p0, T1 p1) {
  return new ConstMemberCallback1_2<C, T0, T1, X0>(true, c, fun, p0, p1);
}

template<typename C, typename T0, typename T1, typename X0>
class MemberCallback1_2 : public Callback1<X0> {
public:
  typedef void (C::*Fun)(T0, T1, X0);
  MemberCallback1_2 (bool is_permanent, C* c, Fun fun, T0 p0, T1 p1)
    : Callback1<X0>(is_permanent),
      c_(c),
    p0_(p0),
      p1_(p1),
      fun_(fun) {
  }
protected:
  virtual void RunInternal(X0 x0) {
    (c_->*fun_)(p0_, p1_, x0);
  }
private:
  C* c_;
  T0 p0_;
  T1 p1_;
  Fun fun_;
};

template<typename C, typename T0, typename T1, typename X0>
MemberCallback1_2<C, T0, T1, X0>* NewCallback(C* c, void (C::*fun)(T0, T1, X0), T0 p0, T1 p1) {
  return new MemberCallback1_2<C, T0, T1, X0>(false, c, fun, p0, p1);
}
template<typename C, typename T0, typename T1, typename X0>
MemberCallback1_2<C, T0, T1, X0>* NewPermanentCallback(C* c, void (C::*fun)(T0, T1, X0), T0 p0, T1 p1) {
  return new MemberCallback1_2<C, T0, T1, X0>(true, c, fun, p0, p1);
}

template<typename T0, typename T1, typename T2, typename X0>
class Callback1_3 : public Callback1<X0> {
public:
  typedef void (*Fun)(T0, T1, T2, X0);
  Callback1_3(bool is_permanent, Fun fun, T0 p0, T1 p1, T2 p2)
    : Callback1<X0>(is_permanent),
      p0_(p0),
      p1_(p1),
      p2_(p2),
      fun_(fun) {
  }
protected:
  virtual void RunInternal(X0 x0) {
    (*fun_)(p0_, p1_, p2_, x0);
  }
private:
  T0 p0_;
  T1 p1_;
  T2 p2_;
  Fun fun_;
};
template<typename T0, typename T1, typename T2, typename X0>
Callback1_3<T0, T1, T2, X0>* NewCallback(void (*fun)(T0, T1, T2, X0), T0 p0, T1 p1, T2 p2) {
  return new Callback1_3<T0, T1, T2, X0>(false, fun, p0, p1, p2);
}
template<typename T0, typename T1, typename T2, typename X0>
Callback1_3<T0, T1, T2, X0>* NewPermanentCallback(void (*fun)(T0, T1, T2, X0), T0 p0, T1 p1, T2 p2) {
  return new Callback1_3<T0, T1, T2, X0>(true, fun, p0, p1, p2);
}


template<typename C, typename T0, typename T1, typename T2, typename X0>
class ConstMemberCallback1_3 : public Callback1<X0> {
public:
  typedef void (C::*Fun)(T0, T1, T2, X0) const;
  ConstMemberCallback1_3 (bool is_permanent, const C* c, Fun fun, T0 p0, T1 p1, T2 p2)
    : Callback1<X0>(is_permanent),
      c_(c),
      p0_(p0),
      p1_(p1),
      p2_(p2),
      fun_(fun) {
  }
protected:
  virtual void RunInternal(X0 x0) {
      (c_->*fun_)(p0_, p1_, p2_, x0);
  }
private:
  const C* c_;
  T0 p0_;
  T1 p1_;
  T2 p2_;
  Fun fun_;
};

template<typename C, typename T0, typename T1, typename T2, typename X0>
ConstMemberCallback1_3<C, T0, T1, T2, X0>* NewCallback(const C* c, void (C::*fun)(T0, T1, T2, X0) const, T0 p0, T1 p1, T2 p2) {
  return new ConstMemberCallback1_3<C, T0, T1, T2, X0>(false, c, fun, p0, p1, p2);
}
template<typename C, typename T0, typename T1, typename T2, typename X0>
ConstMemberCallback1_3<C, T0, T1, T2, X0>* NewPermanentCallback(const C* c, void (C::*fun)(T0, T1, T2, X0) const, T0 p0, T1 p1, T2 p2) {
  return new ConstMemberCallback1_3<C, T0, T1, T2, X0>(true, c, fun, p0, p1, p2);
}

template<typename C, typename T0, typename T1, typename T2, typename X0>
class MemberCallback1_3 : public Callback1<X0> {
public:
  typedef void (C::*Fun)(T0, T1, T2, X0);
  MemberCallback1_3 (bool is_permanent, C* c, Fun fun, T0 p0, T1 p1, T2 p2)
    : Callback1<X0>(is_permanent),
      c_(c),
      p0_(p0),
      p1_(p1),
      p2_(p2),
      fun_(fun) {
  }
protected:
  virtual void RunInternal(X0 x0) {
    (c_->*fun_)(p0_, p1_, p2_, x0);
  }
private:
  C* c_;
  T0 p0_;
  T1 p1_;
  T2 p2_;
  Fun fun_;
};

template<typename C, typename T0, typename T1, typename T2, typename X0>
MemberCallback1_3<C, T0, T1, T2, X0>* NewCallback(C* c, void (C::*fun)(T0, T1, T2, X0), T0 p0, T1 p1, T2 p2) {
  return new MemberCallback1_3<C, T0, T1, T2, X0>(false, c, fun, p0, p1, p2);
}
template<typename C, typename T0, typename T1, typename T2, typename X0>
MemberCallback1_3<C, T0, T1, T2, X0>* NewPermanentCallback(C* c, void (C::*fun)(T0, T1, T2, X0), T0 p0, T1 p1, T2 p2) {
  return new MemberCallback1_3<C, T0, T1, T2, X0>(true, c, fun, p0, p1, p2);
}



template<typename T0, typename T1, typename T2, typename T3, typename X0>
class Callback1_4 : public Callback1<X0> {
public:
  typedef void (*Fun)(T0, T1, T2, T3, X0);
  Callback1_4(bool is_permanent, Fun fun, T0 p0, T1 p1, T2 p2, T3 p3)
    : Callback1<X0>(is_permanent),
      p0_(p0),
      p1_(p1),
      p2_(p2),
      p3_(p3),
      fun_(fun) {
  }
protected:
  virtual void RunInternal(X0 x0) {
    (*fun_)(p0_, p1_, p2_, p3_, x0);
  }
private:
  T0 p0_;
  T1 p1_;
  T2 p2_;
  T3 p3_;
  Fun fun_;
};
template<typename T0, typename T1, typename T2, typename T3, typename X0>
Callback1_4<T0, T1, T2, T3, X0>* NewCallback(void (*fun)(T0, T1, T2, T3, X0), T0 p0, T1 p1, T2 p2, T3 p3) {
  return new Callback1_4<T0, T1, T2, T3, X0>(false, fun, p0, p1, p2, p3);
}
template<typename T0, typename T1, typename T2, typename T3, typename X0>
Callback1_4<T0, T1, T2, T3, X0>* NewPermanentCallback(void (*fun)(T0, T1, T2, T3, X0), T0 p0, T1 p1, T2 p2, T3 p3) {
  return new Callback1_4<T0, T1, T2, T3, X0>(true, fun, p0, p1, p2, p3);
}


template<typename C, typename T0, typename T1, typename T2, typename T3, typename X0>
class ConstMemberCallback1_4 : public Callback1<X0> {
public:
  typedef void (C::*Fun)(T0, T1, T2, T3, X0) const;
  ConstMemberCallback1_4 (bool is_permanent, const C* c, Fun fun, T0 p0, T1 p1, T2 p2, T3 p3)
    : Callback1<X0>(is_permanent),
      c_(c),
      p0_(p0),
      p1_(p1),
      p2_(p2),
      p3_(p3),
      fun_(fun) {
  }
protected:
  virtual void RunInternal(X0 x0) {
    (c_->*fun_)(p0_, p1_, p2_, p3_, x0);
  }
private:
  const C* c_;
  T0 p0_;
  T1 p1_;
  T2 p2_;
  T3 p3_;
  Fun fun_;
};

template<typename C, typename T0, typename T1, typename T2, typename T3, typename X0>
ConstMemberCallback1_4<C, T0, T1, T2, T3, X0>* NewCallback(const C* c, void (C::*fun)(T0, T1, T2, T3, X0) const, T0 p0, T1 p1, T2 p2, T3 p3) {
  return new ConstMemberCallback1_4<C, T0, T1, T2, T3, X0>(false, c, fun, p0, p1, p2, p3);
}
template<typename C, typename T0, typename T1, typename T2, typename T3, typename X0>
ConstMemberCallback1_4<C, T0, T1, T2, T3, X0>* NewPermanentCallback(const C* c, void (C::*fun)(T0, T1, T2, T3, X0) const, T0 p0, T1 p1, T2 p2, T3 p3) {
  return new ConstMemberCallback1_4<C, T0, T1, T2, T3, X0>(true, c, fun, p0, p1, p2, p3);
}

template<typename C, typename T0, typename T1, typename T2, typename T3, typename X0>
class MemberCallback1_4 : public Callback1<X0> {
public:
  typedef void (C::*Fun)(T0, T1, T2, T3, X0);
  MemberCallback1_4 (bool is_permanent, C* c, Fun fun, T0 p0, T1 p1, T2 p2, T3 p3)
    : Callback1<X0>(is_permanent),
      c_(c),
      p0_(p0),
      p1_(p1),
      p2_(p2),
      p3_(p3),
      fun_(fun) {
  }
protected:
  virtual void RunInternal(X0 x0) {
    (c_->*fun_)(p0_, p1_, p2_, p3_, x0);
  }
private:
  C* c_;
  T0 p0_;
  T1 p1_;
  T2 p2_;
  T3 p3_;
  Fun fun_;
};

template<typename C, typename T0, typename T1, typename T2, typename T3, typename X0>
MemberCallback1_4<C, T0, T1, T2, T3, X0>* NewCallback(C* c, void (C::*fun)(T0, T1, T2, T3, X0), T0 p0, T1 p1, T2 p2, T3 p3) {
  return new MemberCallback1_4<C, T0, T1, T2, T3, X0>(false, c, fun, p0, p1, p2, p3);
}
template<typename C, typename T0, typename T1, typename T2, typename T3, typename X0>
MemberCallback1_4<C, T0, T1, T2, T3, X0>* NewPermanentCallback(C* c, void (C::*fun)(T0, T1, T2, T3, X0), T0 p0, T1 p1, T2 p2, T3 p3) {
  return new MemberCallback1_4<C, T0, T1, T2, T3, X0>(true, c, fun, p0, p1, p2, p3);
}



template<typename T0, typename T1, typename T2, typename T3, typename T4, typename X0>
class Callback1_5 : public Callback1<X0> {
public:
  typedef void (*Fun)(T0, T1, T2, T3, T4, X0);
  Callback1_5(bool is_permanent, Fun fun, T0 p0, T1 p1, T2 p2, T3 p3, T4 p4)
    : Callback1<X0>(is_permanent),
      p0_(p0),
      p1_(p1),
      p2_(p2),
      p3_(p3),
      p4_(p4),
      fun_(fun) {
  }
protected:
  virtual void RunInternal(X0 x0) {
    (*fun_)(p0_, p1_, p2_, p3_, p4_, x0);
  }
private:
  T0 p0_;
  T1 p1_;
  T2 p2_;
  T3 p3_;
  T4 p4_;
  Fun fun_;
};
template<typename T0, typename T1, typename T2, typename T3, typename T4, typename X0>
Callback1_5<T0, T1, T2, T3, T4, X0>* NewCallback(void (*fun)(T0, T1, T2, T3, T4, X0), T0 p0, T1 p1, T2 p2, T3 p3, T4 p4) {
  return new Callback1_5<T0, T1, T2, T3, T4, X0>(false, fun, p0, p1, p2, p3, p4);
}
template<typename T0, typename T1, typename T2, typename T3, typename T4, typename X0>
Callback1_5<T0, T1, T2, T3, T4, X0>* NewPermanentCallback(void (*fun)(T0, T1, T2, T3, T4, X0), T0 p0, T1 p1, T2 p2, T3 p3, T4 p4) {
  return new Callback1_5<T0, T1, T2, T3, T4, X0>(true, fun, p0, p1, p2, p3, p4);
}


template<typename C, typename T0, typename T1, typename T2, typename T3, typename T4, typename X0>
class ConstMemberCallback1_5 : public Callback1<X0> {
public:
  typedef void (C::*Fun)(T0, T1, T2, T3, T4, X0) const;
  ConstMemberCallback1_5 (bool is_permanent, const C* c, Fun fun, T0 p0, T1 p1, T2 p2, T3 p3, T4 p4)
    : Callback1<X0>(is_permanent),
    c_(c),
      p0_(p0),
p1_(p1),
p2_(p2),
p3_(p3),
p4_(p4),
      fun_(fun) {
  }
protected:
  virtual void RunInternal(X0 x0) {
    (c_->*fun_)(p0_, p1_, p2_, p3_, p4_, x0);
  }
private:
  const C* c_;
  T0 p0_;
  T1 p1_;
  T2 p2_;
  T3 p3_;
  T4 p4_;
  Fun fun_;
};

template<typename C, typename T0, typename T1, typename T2, typename T3, typename T4, typename X0>
ConstMemberCallback1_5<C, T0, T1, T2, T3, T4, X0>* NewCallback(const C* c, void (C::*fun)(T0, T1, T2, T3, T4, X0) const, T0 p0, T1 p1, T2 p2, T3 p3, T4 p4) {
  return new ConstMemberCallback1_5<C, T0, T1, T2, T3, T4, X0>(false, c, fun, p0, p1, p2, p3, p4);
}
template<typename C, typename T0, typename T1, typename T2, typename T3, typename T4, typename X0>
ConstMemberCallback1_5<C, T0, T1, T2, T3, T4, X0>* NewPermanentCallback(const C* c, void (C::*fun)(T0, T1, T2, T3, T4, X0) const, T0 p0, T1 p1, T2 p2, T3 p3, T4 p4) {
  return new ConstMemberCallback1_5<C, T0, T1, T2, T3, T4, X0>(true, c, fun, p0, p1, p2, p3, p4);
}



template<typename C, typename T0, typename T1, typename T2, typename T3, typename T4, typename X0>
class MemberCallback1_5 : public Callback1<X0> {
public:
  typedef void (C::*Fun)(T0, T1, T2, T3, T4, X0);
  MemberCallback1_5 (bool is_permanent, C* c, Fun fun, T0 p0, T1 p1, T2 p2, T3 p3, T4 p4)
    : Callback1<X0>(is_permanent),
      c_(c),
      p0_(p0),
      p1_(p1),
      p2_(p2),
      p3_(p3),
      p4_(p4),
      fun_(fun) {
  }
protected:
  virtual void RunInternal(X0 x0) {
    (c_->*fun_)(p0_, p1_, p2_, p3_, p4_, x0);
  }
private:
  C* c_;
  T0 p0_;
  T1 p1_;
  T2 p2_;
  T3 p3_;
  T4 p4_;
  Fun fun_;
};

template<typename C, typename T0, typename T1, typename T2, typename T3, typename T4, typename X0>
MemberCallback1_5<C, T0, T1, T2, T3, T4, X0>* NewCallback(C* c, void (C::*fun)(T0, T1, T2, T3, T4, X0), T0 p0, T1 p1, T2 p2, T3 p3, T4 p4) {
  return new MemberCallback1_5<C, T0, T1, T2, T3, T4, X0>(false, c, fun, p0, p1, p2, p3, p4);
}
template<typename C, typename T0, typename T1, typename T2, typename T3, typename T4, typename X0>
MemberCallback1_5<C, T0, T1, T2, T3, T4, X0>* NewPermanentCallback(C* c, void (C::*fun)(T0, T1, T2, T3, T4, X0), T0 p0, T1 p1, T2 p2, T3 p3, T4 p4) {
  return new MemberCallback1_5<C, T0, T1, T2, T3, T4, X0>(true, c, fun, p0, p1, p2, p3, p4);
}




template<typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename X0>
class Callback1_6 : public Callback1<X0> {
public:
  typedef void (*Fun)(T0, T1, T2, T3, T4, T5, X0);
  Callback1_6(bool is_permanent, Fun fun, T0 p0, T1 p1, T2 p2, T3 p3, T4 p4, T5 p5)
    : Callback1<X0>(is_permanent),
    p0_(p0),
p1_(p1),
p2_(p2),
p3_(p3),
p4_(p4),
p5_(p5),
      fun_(fun) {
  }
protected:
  virtual void RunInternal(X0 x0) {
    (*fun_)(p0_, p1_, p2_, p3_, p4_, p5_, x0);
  }
private:
  T0 p0_;
T1 p1_;
T2 p2_;
T3 p3_;
T4 p4_;
T5 p5_;
  Fun fun_;
};
template<typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename X0>
Callback1_6<T0, T1, T2, T3, T4, T5, X0>* NewCallback(void (*fun)(T0, T1, T2, T3, T4, T5, X0), T0 p0, T1 p1, T2 p2, T3 p3, T4 p4, T5 p5) {
  return new Callback1_6<T0, T1, T2, T3, T4, T5, X0>(false, fun, p0, p1, p2, p3, p4, p5);
}
template<typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename X0>
Callback1_6<T0, T1, T2, T3, T4, T5, X0>* NewPermanentCallback(void (*fun)(T0, T1, T2, T3, T4, T5, X0), T0 p0, T1 p1, T2 p2, T3 p3, T4 p4, T5 p5) {
  return new Callback1_6<T0, T1, T2, T3, T4, T5, X0>(true, fun, p0, p1, p2, p3, p4, p5);
}


template<typename C, typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename X0>
class ConstMemberCallback1_6 : public Callback1<X0> {
public:
  typedef void (C::*Fun)(T0, T1, T2, T3, T4, T5, X0) const;
  ConstMemberCallback1_6 (bool is_permanent, const C* c, Fun fun, T0 p0, T1 p1, T2 p2, T3 p3, T4 p4, T5 p5)
    : Callback1<X0>(is_permanent),
    c_(c),
    p0_(p0),
p1_(p1),
p2_(p2),
p3_(p3),
p4_(p4),
p5_(p5),
      fun_(fun) {
  }
protected:
  virtual void RunInternal(X0 x0) {
      (c_->*fun_)(p0_, p1_, p2_, p3_, p4_, p5_, x0);
  }
private:
  const C* c_;
  T0 p0_;
T1 p1_;
T2 p2_;
T3 p3_;
T4 p4_;
T5 p5_;
  Fun fun_;
};

template<typename C, typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename X0>
ConstMemberCallback1_6<C, T0, T1, T2, T3, T4, T5, X0>* NewCallback(const C* c, void (C::*fun)(T0, T1, T2, T3, T4, T5, X0) const, T0 p0, T1 p1, T2 p2, T3 p3, T4 p4, T5 p5) {
  return new ConstMemberCallback1_6<C, T0, T1, T2, T3, T4, T5, X0>(false, c, fun, p0, p1, p2, p3, p4, p5);
}
template<typename C, typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename X0>
ConstMemberCallback1_6<C, T0, T1, T2, T3, T4, T5, X0>* NewPermanentCallback(const C* c, void (C::*fun)(T0, T1, T2, T3, T4, T5, X0) const, T0 p0, T1 p1, T2 p2, T3 p3, T4 p4, T5 p5) {
  return new ConstMemberCallback1_6<C, T0, T1, T2, T3, T4, T5, X0>(true, c, fun, p0, p1, p2, p3, p4, p5);
}



template<typename C, typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename X0>
class MemberCallback1_6 : public Callback1<X0> {
public:
  typedef void (C::*Fun)(T0, T1, T2, T3, T4, T5, X0);
  MemberCallback1_6 (bool is_permanent, C* c, Fun fun, T0 p0, T1 p1, T2 p2, T3 p3, T4 p4, T5 p5)
    : Callback1<X0>(is_permanent),
    c_(c),
    p0_(p0),
p1_(p1),
p2_(p2),
p3_(p3),
p4_(p4),
p5_(p5),
      fun_(fun) {
  }
protected:
  virtual void RunInternal(X0 x0) {
      (c_->*fun_)(p0_, p1_, p2_, p3_, p4_, p5_, x0);
  }
private:
  C* c_;
  T0 p0_;
T1 p1_;
T2 p2_;
T3 p3_;
T4 p4_;
T5 p5_;
  Fun fun_;
};

template<typename C, typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename X0>
MemberCallback1_6<C, T0, T1, T2, T3, T4, T5, X0>* NewCallback(C* c, void (C::*fun)(T0, T1, T2, T3, T4, T5, X0), T0 p0, T1 p1, T2 p2, T3 p3, T4 p4, T5 p5) {
  return new MemberCallback1_6<C, T0, T1, T2, T3, T4, T5, X0>(false, c, fun, p0, p1, p2, p3, p4, p5);
}
template<typename C, typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename X0>
MemberCallback1_6<C, T0, T1, T2, T3, T4, T5, X0>* NewPermanentCallback(C* c, void (C::*fun)(T0, T1, T2, T3, T4, T5, X0), T0 p0, T1 p1, T2 p2, T3 p3, T4 p4, T5 p5) {
  return new MemberCallback1_6<C, T0, T1, T2, T3, T4, T5, X0>(true, c, fun, p0, p1, p2, p3, p4, p5);
}



template<typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename X0>
class Callback1_7 : public Callback1<X0> {
public:
  typedef void (*Fun)(T0, T1, T2, T3, T4, T5, T6, X0);
  Callback1_7(bool is_permanent, Fun fun, T0 p0, T1 p1, T2 p2, T3 p3, T4 p4, T5 p5, T6 p6)
    : Callback1<X0>(is_permanent),
    p0_(p0),
p1_(p1),
p2_(p2),
p3_(p3),
p4_(p4),
p5_(p5),
p6_(p6),
      fun_(fun) {
  }
protected:
  virtual void RunInternal(X0 x0) {
    (*fun_)(p0_, p1_, p2_, p3_, p4_, p5_, p6_, x0);
  }
private:
  T0 p0_;
T1 p1_;
T2 p2_;
T3 p3_;
T4 p4_;
T5 p5_;
T6 p6_;
  Fun fun_;
};
template<typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename X0>
Callback1_7<T0, T1, T2, T3, T4, T5, T6, X0>* NewCallback(void (*fun)(T0, T1, T2, T3, T4, T5, T6, X0), T0 p0, T1 p1, T2 p2, T3 p3, T4 p4, T5 p5, T6 p6) {
  return new Callback1_7<T0, T1, T2, T3, T4, T5, T6, X0>(false, fun, p0, p1, p2, p3, p4, p5, p6);
}
template<typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename X0>
Callback1_7<T0, T1, T2, T3, T4, T5, T6, X0>* NewPermanentCallback(void (*fun)(T0, T1, T2, T3, T4, T5, T6, X0), T0 p0, T1 p1, T2 p2, T3 p3, T4 p4, T5 p5, T6 p6) {
  return new Callback1_7<T0, T1, T2, T3, T4, T5, T6, X0>(true, fun, p0, p1, p2, p3, p4, p5, p6);
}


template<typename C, typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename X0>
class ConstMemberCallback1_7 : public Callback1<X0> {
public:
  typedef void (C::*Fun)(T0, T1, T2, T3, T4, T5, T6, X0) const;
  ConstMemberCallback1_7 (bool is_permanent, const C* c, Fun fun, T0 p0, T1 p1, T2 p2, T3 p3, T4 p4, T5 p5, T6 p6)
    : Callback1<X0>(is_permanent),
    c_(c),
    p0_(p0),
p1_(p1),
p2_(p2),
p3_(p3),
p4_(p4),
p5_(p5),
p6_(p6),
      fun_(fun) {
  }
protected:
  virtual void RunInternal(X0 x0) {
      (c_->*fun_)(p0_, p1_, p2_, p3_, p4_, p5_, p6_, x0);
  }
private:
  const C* c_;
  T0 p0_;
T1 p1_;
T2 p2_;
T3 p3_;
T4 p4_;
T5 p5_;
T6 p6_;
  Fun fun_;
};

template<typename C, typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename X0>
ConstMemberCallback1_7<C, T0, T1, T2, T3, T4, T5, T6, X0>* NewCallback(const C* c, void (C::*fun)(T0, T1, T2, T3, T4, T5, T6, X0) const, T0 p0, T1 p1, T2 p2, T3 p3, T4 p4, T5 p5, T6 p6) {
  return new ConstMemberCallback1_7<C, T0, T1, T2, T3, T4, T5, T6, X0>(false, c, fun, p0, p1, p2, p3, p4, p5, p6);
}
template<typename C, typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename X0>
ConstMemberCallback1_7<C, T0, T1, T2, T3, T4, T5, T6, X0>* NewPermanentCallback(const C* c, void (C::*fun)(T0, T1, T2, T3, T4, T5, T6, X0) const, T0 p0, T1 p1, T2 p2, T3 p3, T4 p4, T5 p5, T6 p6) {
  return new ConstMemberCallback1_7<C, T0, T1, T2, T3, T4, T5, T6, X0>(true, c, fun, p0, p1, p2, p3, p4, p5, p6);
}



template<typename C, typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename X0>
class MemberCallback1_7 : public Callback1<X0> {
public:
  typedef void (C::*Fun)(T0, T1, T2, T3, T4, T5, T6, X0);
  MemberCallback1_7 (bool is_permanent, C* c, Fun fun, T0 p0, T1 p1, T2 p2, T3 p3, T4 p4, T5 p5, T6 p6)
    : Callback1<X0>(is_permanent),
    c_(c),
    p0_(p0),
p1_(p1),
p2_(p2),
p3_(p3),
p4_(p4),
p5_(p5),
p6_(p6),
      fun_(fun) {
  }
protected:
  virtual void RunInternal(X0 x0) {
      (c_->*fun_)(p0_, p1_, p2_, p3_, p4_, p5_, p6_, x0);
  }
private:
  C* c_;
  T0 p0_;
T1 p1_;
T2 p2_;
T3 p3_;
T4 p4_;
T5 p5_;
T6 p6_;
  Fun fun_;
};

template<typename C, typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename X0>
MemberCallback1_7<C, T0, T1, T2, T3, T4, T5, T6, X0>* NewCallback(C* c, void (C::*fun)(T0, T1, T2, T3, T4, T5, T6, X0), T0 p0, T1 p1, T2 p2, T3 p3, T4 p4, T5 p5, T6 p6) {
  return new MemberCallback1_7<C, T0, T1, T2, T3, T4, T5, T6, X0>(false, c, fun, p0, p1, p2, p3, p4, p5, p6);
}
template<typename C, typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename X0>
MemberCallback1_7<C, T0, T1, T2, T3, T4, T5, T6, X0>* NewPermanentCallback(C* c, void (C::*fun)(T0, T1, T2, T3, T4, T5, T6, X0), T0 p0, T1 p1, T2 p2, T3 p3, T4 p4, T5 p5, T6 p6) {
  return new MemberCallback1_7<C, T0, T1, T2, T3, T4, T5, T6, X0>(true, c, fun, p0, p1, p2, p3, p4, p5, p6);
}



template<typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename X0>
class Callback1_8 : public Callback1<X0> {
public:
  typedef void (*Fun)(T0, T1, T2, T3, T4, T5, T6, T7, X0);
  Callback1_8(bool is_permanent, Fun fun, T0 p0, T1 p1, T2 p2, T3 p3, T4 p4, T5 p5, T6 p6, T7 p7)
    : Callback1<X0>(is_permanent),
    p0_(p0),
p1_(p1),
p2_(p2),
p3_(p3),
p4_(p4),
p5_(p5),
p6_(p6),
p7_(p7),
      fun_(fun) {
  }
protected:
  virtual void RunInternal(X0 x0) {
    (*fun_)(p0_, p1_, p2_, p3_, p4_, p5_, p6_, p7_, x0);
  }
private:
  T0 p0_;
T1 p1_;
T2 p2_;
T3 p3_;
T4 p4_;
T5 p5_;
T6 p6_;
T7 p7_;
  Fun fun_;
};
template<typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename X0>
Callback1_8<T0, T1, T2, T3, T4, T5, T6, T7, X0>* NewCallback(void (*fun)(T0, T1, T2, T3, T4, T5, T6, T7, X0), T0 p0, T1 p1, T2 p2, T3 p3, T4 p4, T5 p5, T6 p6, T7 p7) {
  return new Callback1_8<T0, T1, T2, T3, T4, T5, T6, T7, X0>(false, fun, p0, p1, p2, p3, p4, p5, p6, p7);
}
template<typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename X0>
Callback1_8<T0, T1, T2, T3, T4, T5, T6, T7, X0>* NewPermanentCallback(void (*fun)(T0, T1, T2, T3, T4, T5, T6, T7, X0), T0 p0, T1 p1, T2 p2, T3 p3, T4 p4, T5 p5, T6 p6, T7 p7) {
  return new Callback1_8<T0, T1, T2, T3, T4, T5, T6, T7, X0>(true, fun, p0, p1, p2, p3, p4, p5, p6, p7);
}


template<typename C, typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename X0>
class ConstMemberCallback1_8 : public Callback1<X0> {
public:
  typedef void (C::*Fun)(T0, T1, T2, T3, T4, T5, T6, T7, X0) const;
  ConstMemberCallback1_8 (bool is_permanent, const C* c, Fun fun, T0 p0, T1 p1, T2 p2, T3 p3, T4 p4, T5 p5, T6 p6, T7 p7)
    : Callback1<X0>(is_permanent),
    c_(c),
    p0_(p0),
p1_(p1),
p2_(p2),
p3_(p3),
p4_(p4),
p5_(p5),
p6_(p6),
p7_(p7),
      fun_(fun) {
  }
protected:
  virtual void RunInternal(X0 x0) {
      (c_->*fun_)(p0_, p1_, p2_, p3_, p4_, p5_, p6_, p7_, x0);
  }
private:
  const C* c_;
  T0 p0_;
T1 p1_;
T2 p2_;
T3 p3_;
T4 p4_;
T5 p5_;
T6 p6_;
T7 p7_;
  Fun fun_;
};

template<typename C, typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename X0>
ConstMemberCallback1_8<C, T0, T1, T2, T3, T4, T5, T6, T7, X0>* NewCallback(const C* c, void (C::*fun)(T0, T1, T2, T3, T4, T5, T6, T7, X0) const, T0 p0, T1 p1, T2 p2, T3 p3, T4 p4, T5 p5, T6 p6, T7 p7) {
  return new ConstMemberCallback1_8<C, T0, T1, T2, T3, T4, T5, T6, T7, X0>(false, c, fun, p0, p1, p2, p3, p4, p5, p6, p7);
}
template<typename C, typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename X0>
ConstMemberCallback1_8<C, T0, T1, T2, T3, T4, T5, T6, T7, X0>* NewPermanentCallback(const C* c, void (C::*fun)(T0, T1, T2, T3, T4, T5, T6, T7, X0) const, T0 p0, T1 p1, T2 p2, T3 p3, T4 p4, T5 p5, T6 p6, T7 p7) {
  return new ConstMemberCallback1_8<C, T0, T1, T2, T3, T4, T5, T6, T7, X0>(true, c, fun, p0, p1, p2, p3, p4, p5, p6, p7);
}



template<typename C, typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename X0>
class MemberCallback1_8 : public Callback1<X0> {
public:
  typedef void (C::*Fun)(T0, T1, T2, T3, T4, T5, T6, T7, X0);
  MemberCallback1_8 (bool is_permanent, C* c, Fun fun, T0 p0, T1 p1, T2 p2, T3 p3, T4 p4, T5 p5, T6 p6, T7 p7)
    : Callback1<X0>(is_permanent),
    c_(c),
    p0_(p0),
p1_(p1),
p2_(p2),
p3_(p3),
p4_(p4),
p5_(p5),
p6_(p6),
p7_(p7),
      fun_(fun) {
  }
protected:
  virtual void RunInternal(X0 x0) {
      (c_->*fun_)(p0_, p1_, p2_, p3_, p4_, p5_, p6_, p7_, x0);
  }
private:
  C* c_;
  T0 p0_;
T1 p1_;
T2 p2_;
T3 p3_;
T4 p4_;
T5 p5_;
T6 p6_;
T7 p7_;
  Fun fun_;
};

template<typename C, typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename X0>
MemberCallback1_8<C, T0, T1, T2, T3, T4, T5, T6, T7, X0>* NewCallback(C* c, void (C::*fun)(T0, T1, T2, T3, T4, T5, T6, T7, X0), T0 p0, T1 p1, T2 p2, T3 p3, T4 p4, T5 p5, T6 p6, T7 p7) {
  return new MemberCallback1_8<C, T0, T1, T2, T3, T4, T5, T6, T7, X0>(false, c, fun, p0, p1, p2, p3, p4, p5, p6, p7);
}
template<typename C, typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename X0>
MemberCallback1_8<C, T0, T1, T2, T3, T4, T5, T6, T7, X0>* NewPermanentCallback(C* c, void (C::*fun)(T0, T1, T2, T3, T4, T5, T6, T7, X0), T0 p0, T1 p1, T2 p2, T3 p3, T4 p4, T5 p5, T6 p6, T7 p7) {
  return new MemberCallback1_8<C, T0, T1, T2, T3, T4, T5, T6, T7, X0>(true, c, fun, p0, p1, p2, p3, p4, p5, p6, p7);
}



template<typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename X0>
class Callback1_9 : public Callback1<X0> {
public:
  typedef void (*Fun)(T0, T1, T2, T3, T4, T5, T6, T7, T8, X0);
  Callback1_9(bool is_permanent, Fun fun, T0 p0, T1 p1, T2 p2, T3 p3, T4 p4, T5 p5, T6 p6, T7 p7, T8 p8)
    : Callback1<X0>(is_permanent),
    p0_(p0),
p1_(p1),
p2_(p2),
p3_(p3),
p4_(p4),
p5_(p5),
p6_(p6),
p7_(p7),
p8_(p8),
      fun_(fun) {
  }
protected:
  virtual void RunInternal(X0 x0) {
    (*fun_)(p0_, p1_, p2_, p3_, p4_, p5_, p6_, p7_, p8_, x0);
  }
private:
  T0 p0_;
T1 p1_;
T2 p2_;
T3 p3_;
T4 p4_;
T5 p5_;
T6 p6_;
T7 p7_;
T8 p8_;
  Fun fun_;
};
template<typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename X0>
Callback1_9<T0, T1, T2, T3, T4, T5, T6, T7, T8, X0>* NewCallback(void (*fun)(T0, T1, T2, T3, T4, T5, T6, T7, T8, X0), T0 p0, T1 p1, T2 p2, T3 p3, T4 p4, T5 p5, T6 p6, T7 p7, T8 p8) {
  return new Callback1_9<T0, T1, T2, T3, T4, T5, T6, T7, T8, X0>(false, fun, p0, p1, p2, p3, p4, p5, p6, p7, p8);
}
template<typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename X0>
Callback1_9<T0, T1, T2, T3, T4, T5, T6, T7, T8, X0>* NewPermanentCallback(void (*fun)(T0, T1, T2, T3, T4, T5, T6, T7, T8, X0), T0 p0, T1 p1, T2 p2, T3 p3, T4 p4, T5 p5, T6 p6, T7 p7, T8 p8) {
  return new Callback1_9<T0, T1, T2, T3, T4, T5, T6, T7, T8, X0>(true, fun, p0, p1, p2, p3, p4, p5, p6, p7, p8);
}


template<typename C, typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename X0>
class ConstMemberCallback1_9 : public Callback1<X0> {
public:
  typedef void (C::*Fun)(T0, T1, T2, T3, T4, T5, T6, T7, T8, X0) const;
  ConstMemberCallback1_9 (bool is_permanent, const C* c, Fun fun, T0 p0, T1 p1, T2 p2, T3 p3, T4 p4, T5 p5, T6 p6, T7 p7, T8 p8)
    : Callback1<X0>(is_permanent),
    c_(c),
    p0_(p0),
p1_(p1),
p2_(p2),
p3_(p3),
p4_(p4),
p5_(p5),
p6_(p6),
p7_(p7),
p8_(p8),
      fun_(fun) {
  }
protected:
  virtual void RunInternal(X0 x0) {
      (c_->*fun_)(p0_, p1_, p2_, p3_, p4_, p5_, p6_, p7_, p8_, x0);
  }
private:
  const C* c_;
  T0 p0_;
T1 p1_;
T2 p2_;
T3 p3_;
T4 p4_;
T5 p5_;
T6 p6_;
T7 p7_;
T8 p8_;
  Fun fun_;
};

template<typename C, typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename X0>
ConstMemberCallback1_9<C, T0, T1, T2, T3, T4, T5, T6, T7, T8, X0>* NewCallback(const C* c, void (C::*fun)(T0, T1, T2, T3, T4, T5, T6, T7, T8, X0) const, T0 p0, T1 p1, T2 p2, T3 p3, T4 p4, T5 p5, T6 p6, T7 p7, T8 p8) {
  return new ConstMemberCallback1_9<C, T0, T1, T2, T3, T4, T5, T6, T7, T8, X0>(false, c, fun, p0, p1, p2, p3, p4, p5, p6, p7, p8);
}
template<typename C, typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename X0>
ConstMemberCallback1_9<C, T0, T1, T2, T3, T4, T5, T6, T7, T8, X0>* NewPermanentCallback(const C* c, void (C::*fun)(T0, T1, T2, T3, T4, T5, T6, T7, T8, X0) const, T0 p0, T1 p1, T2 p2, T3 p3, T4 p4, T5 p5, T6 p6, T7 p7, T8 p8) {
  return new ConstMemberCallback1_9<C, T0, T1, T2, T3, T4, T5, T6, T7, T8, X0>(true, c, fun, p0, p1, p2, p3, p4, p5, p6, p7, p8);
}



template<typename C, typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename X0>
class MemberCallback1_9 : public Callback1<X0> {
public:
  typedef void (C::*Fun)(T0, T1, T2, T3, T4, T5, T6, T7, T8, X0);
  MemberCallback1_9 (bool is_permanent, C* c, Fun fun, T0 p0, T1 p1, T2 p2, T3 p3, T4 p4, T5 p5, T6 p6, T7 p7, T8 p8)
    : Callback1<X0>(is_permanent),
    c_(c),
    p0_(p0),
p1_(p1),
p2_(p2),
p3_(p3),
p4_(p4),
p5_(p5),
p6_(p6),
p7_(p7),
p8_(p8),
      fun_(fun) {
  }
protected:
  virtual void RunInternal(X0 x0) {
      (c_->*fun_)(p0_, p1_, p2_, p3_, p4_, p5_, p6_, p7_, p8_, x0);
  }
private:
  C* c_;
  T0 p0_;
T1 p1_;
T2 p2_;
T3 p3_;
T4 p4_;
T5 p5_;
T6 p6_;
T7 p7_;
T8 p8_;
  Fun fun_;
};

template<typename C, typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename X0>
MemberCallback1_9<C, T0, T1, T2, T3, T4, T5, T6, T7, T8, X0>* NewCallback(C* c, void (C::*fun)(T0, T1, T2, T3, T4, T5, T6, T7, T8, X0), T0 p0, T1 p1, T2 p2, T3 p3, T4 p4, T5 p5, T6 p6, T7 p7, T8 p8) {
  return new MemberCallback1_9<C, T0, T1, T2, T3, T4, T5, T6, T7, T8, X0>(false, c, fun, p0, p1, p2, p3, p4, p5, p6, p7, p8);
}
template<typename C, typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename X0>
MemberCallback1_9<C, T0, T1, T2, T3, T4, T5, T6, T7, T8, X0>* NewPermanentCallback(C* c, void (C::*fun)(T0, T1, T2, T3, T4, T5, T6, T7, T8, X0), T0 p0, T1 p1, T2 p2, T3 p3, T4 p4, T5 p5, T6 p6, T7 p7, T8 p8) {
  return new MemberCallback1_9<C, T0, T1, T2, T3, T4, T5, T6, T7, T8, X0>(true, c, fun, p0, p1, p2, p3, p4, p5, p6, p7, p8);
}

#endif //  __WHISPERLIB_BASE_CALLBACK_CALLBACK1_H__
